#+TITLE: Emacs Config
#+AUTHOR: Andrew Jacobson
#+STARTUP: indent

* Introduction

This is my Emacs config. There are many like it, but this one is mine.

* Personal Info

~whoami~.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Andrew Jacobson"
        user-mail-address "andrew.isaac.jacobson@gmail.com")
#+END_SRC

* Custom File

Load the auto-generated ~custom.el~ file from the dotemacs directory.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC

* Sane Defaults
** Require newline at EOF

Setting ~require-final-newline~ to ~t~ tells emacs to add a newline
to a file on save if it doesn't already have one.

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
  (setq require-trailing-newline t)
#+END_SRC

** Allow 'y' or 'n' answers

Typing 'yes' or 'no' is tedious. Tell emacs to allow 'y' and 'n' instead.

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Set backup directory

Set backup and auto-save-list directories.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

** Set UTF-8

UTF-8. UTF-8, everywhere.

#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system   'utf-8)
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system        'utf-8)
#+END_SRC

** Remove cursor blink

No blink.

#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
#+END_SRC

** Tabs

Prevent tab indentation and set default tab-width.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)
  (setq-default indicate-empty-lines t)
#+END_SRC

** Show matching parens

Highlight opening/closing paren when cursor is on/after opening/closing paren respectively.

#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC

** Delete region when typing

Delete selected region when typing, like you'd expect.

#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC

** No bell

Shhhh.

#+BEGIN_SRC emacs-lisp
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)
#+END_SRC

** Show column number

Show the current column number in the mode line.

#+BEGIN_SRC emacs-lisp
  (column-number-mode t)
#+END_SRC

** Display line numbers

Turn on ~linum-mode~ globally.

#+BEGIN_SRC emacs-lisp
  (global-linum-mode)
  (diminish 'linum-mode)
#+END_SRC

** Use line wrapping

#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode)
  (diminish 'visual-line-mode)
#+END_SRC

** Highlight current line

Highlight the line that the cursor is currently on.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC

** Delete trailing white space on save

Clean up superfluous white space in buffer on save.

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Make it easy to edit this file

Setup some functions/keybindings to enable quick editing/reloading
of this file.

#+BEGIN_SRC emacs-lisp
  (defun aj/find-config ()
    "Edit ~/.emacs.d/config.org"
    (interactive)
    (find-file
     (concat user-emacs-directory "config.org")))

  ;; make room for config command prefix
  (bind-key "C-c c"    nil)
  (bind-key "C-c c e" 'aj/find-config)
#+END_SRC

** Load path

Setup ~load-path~.

#+BEGIN_SRC emacs-lisp
  (defun aj/expand-file-name-in-emacs-dir (name)
    "Expands NAME to an absolute path inside the `user-emacs-directory'."
    (expand-file-name name user-emacs-directory))

  (add-to-list 'load-path (aj/expand-file-name-in-emacs-dir "git"))
  (add-to-list 'load-path (aj/expand-file-name-in-emacs-dir "etc"))
  ;; (add-to-list 'load-path (aj/expand-file-name-in-emacs-dir "git/distel/elisp/"))
#+END_SRC

** Remove annoying UI

Goodbye, annoying UI.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

* Darwin

Settings for Darwin.

#+BEGIN_SRC emacs-lisp
  (when (string-equal system-type 'darwin)
    ;; Make sure alt and meta are setup
    (setq mac-option-modifier 'alt)
    (setq mac-command-modifier 'meta)

    ;; Avoid sending meta keystrokes to the os
    (setq mac-pass-command-to-system nil)

    ;; Quiet `ls does not support --dired' error
    (setq dired-use-ls-dired nil)

    ;; Fullscreen
    (setq ns-use-native-fullscreen nil))
#+END_SRC

* Functions
** force-save

Function to save buffer, even when it has not been modified.

#+BEGIN_SRC emacs-lisp
  (defun aj/force-save ()
    (interactive)
    (not-modified 1)
    (save-buffer))
#+END_SRC

** find-file-remote

Open a file on a remote server via ssh.

#+BEGIN_SRC emacs-lisp
  (defun aj/find-file-remote ()
    (interactive)
    (let ((method "ssh"))
      (aj/ivy--tramp-host-completion
       method
       (lambda (host)
         (counsel-find-file (concat "/ssh:" host ":~/"))))))
#+END_SRC

** sudo-find-file

Open a local file using sudo.

#+BEGIN_SRC emacs-lisp
  (defun aj/sudo-find-file ()
    "Open a file using sudo"
    (interactive)
    (counsel-find-file (concat "/sudo::/")))
#+END_SRC

** sudo-find-file-remote

A tramp host completion function, which provides an ivy list
of ~user@host~ completions.

#+BEGIN_SRC emacs-lisp
  (defun aj/ivy--tramp-host-completion (method &optional handler)
    "Find user@host completions for METHOD"
    (let (res)
      (require 'tramp)
      (dolist (x (tramp-get-completion-function method))
        (setq res (append res (funcall (car x) (cadr x)))))
      (setq res (delq nil res))
      (setq res (cl-delete-duplicates res :test #'equal))
      (ivy-read "Hosts: " (mapcar #'ivy-build-tramp-name res)
                :action (or handler nil))))
#+END_SRC

~sudo-find-file-remote~ definition.

#+BEGIN_SRC emacs-lisp
  (defun aj/sudo-find-file-remote ()
    "Open a file remotely using sudo"
    (interactive)
    (let ((method "ssh"))
      (aj/ivy--tramp-host-completion
       method
       (lambda (host)
         (counsel-find-file (concat "/ssh:" host "|sudo:" host ":/"))))))
#+END_SRC

* Global Keybindings

Some globally useful keybindings.

#+BEGIN_SRC emacs-lisp
  ;; allow C-j to be used in place of C-x
  ;; (define-key key-translation-map "\C-j" "\C-x")

  ;; make room for prefix
  (bind-key "M-j"        nil)

  (bind-key "C-S-y"      'kill-ring-search)
  (bind-key "C-S-j"      (lambda () (interactive) (join-line -1)))
  (bind-key "C-S-SPC"    'exchange-point-and-mark)
  (bind-key "C-x C-/"    'comment-region)
  (bind-key "C-x C-;"    'uncomment-region)
  (bind-key "C-x C-d"    'dired-jump)
  (bind-key "M-/"        'hippie-expand)
  (bind-key "C-x C-s"    'aj/force-save)
  (bind-key "C-<"        'comint-previous-input)
  (bind-key "C->"        'comint-next-input)
  (bind-key "<C-return>" 'newline)
  (bind-key "C-c e"      'ielm)

  ;; make room for prefix
  (bind-key "C-c f"      nil)
  (bind-key "C-c f r"    'aj/find-file-remote)
  (bind-key "C-c f s"    'aj/sudo-find-file)
  (bind-key "C-c f R"    'aj/sudo-find-file-remote)

  ;; compilation
  (bind-key "C-c C-c" nil)
  (bind-key "C-c C-c" 'compile)
  (bind-key "C-c C-r" 'recompile)
#+END_SRC

* Look & Feel
** Packages
*** rainbow-mode

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :diminish
    :ensure t)
#+END_SRC

*** [[https://github.com/Malabarba/smart-mode-line/][smart-mode-line]]

#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :ensure t
    :init (smart-mode-line-enable))
#+END_SRC

** Font
*** Tell emacs to use [[http://adobe-fonts.github.io/source-code-pro/][Source Code Pro]] as default font

This is a good font that I am using for now.
Should maybe try out some other fonts too...

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Source Code Pro-14"))
#+END_SRC

*** Enable emojis :)

#+BEGIN_SRC emacs-lisp
  (let ((font (if (= emacs-major-version 25)
                  "Symbola"
                (cond ((string-equal system-type "darwin") "Apple Color Emoji")
                      ((string-equal system-type "gnu/linux") "Symbola")))))
    (set-fontset-font t 'unicode font nil 'prepend))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  ;; tomorrow themes
  (use-package color-theme-sanityinc-tomorrow
    :ensure t)

  ;; base16 themes
  (use-package base16-theme
    :ensure t)

  ;; gruvbox themes
  (use-package gruvbox-theme
    :ensure t
    :config (load-theme 'gruvbox-dark-medium))
#+END_SRC

* Editing & Movement
** Packages
*** [[https://github.com/magnars/expand-region.el][expand-region]]

Neat package that allows you to expand your selection area
by dynamic semantic units.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind (("C-=" . 'er/expand-region)))
#+END_SRC

*** [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]

Does just what it says: gives you multiple cursors in a buffer.

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (("C-S-m" . mc/mark-all-like-this-dwim)
           ("C-+"   . mc/mark-next-like-this)
           ("C-_"   . mc/unmark-next-like-this)))
#+END_SRC

*** [[https://github.com/wyuenho/move-dup][move-dup]]

Handy little package I like, which allows me to move selections
up and down in a buffer as well as duplicate selections up and down.

#+BEGIN_SRC emacs-lisp
  (use-package move-dup
    :ensure t
    :bind (("C-S-p"   . md/move-lines-up)
           ("C-S-n"   . md/move-lines-down)
           ("C-c C-p" . md/duplicate-up)
           ("C-c C-n" . md/duplicate-down)))
#+END_SRC

*** [[https://github.com/re5et/smart-indent-rigidly][smart-indent-rigidly]]

Manually indent/unindent lines at will.

#+BEGIN_SRC emacs-lisp
  (use-package smart-indent-rigidly
    :ensure t
    :bind (("C-<tab>"   . smart-rigid-indent)
           ("<backtab>" . smart-rigid-unindent)))
#+END_SRC

*** [[https://www.emacswiki.org/emacs/UndoTree][undo-tree]]

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t)
#+END_SRC

*** [[https://github.com/mickeynp/smart-scan][smartscan]]

Quickly jump between symbols in a given buffer.

#+BEGIN_SRC emacs-lisp
  (use-package smartscan
    :ensure t
    :init (global-smartscan-mode t))
#+END_SRC

** Functions
*** Indent and open newline

#+BEGIN_SRC emacs-lisp
  (defun indent-and-open-newline (&optional previous)
    "Add a newline after current line and tab to indentation.
    If PREVIOUS is non-nil, go up a line first."
    (interactive)
    (if previous
        (previous-line))
    (end-of-line)
    (newline)
    (indent-for-tab-command))
#+END_SRC

*** Previous indent and open newline

#+BEGIN_SRC emacs-lisp
  (defun previous-indent-and-open-newline ()
    "Call indent-and-open-newline with non-nil PREVIOUS value"
    (interactive)
    (indent-and-open-newline t))
#+END_SRC

*** Indent entire buffer

#+BEGIN_SRC emacs-lisp
  (defun indent-buffer ()
    "Fix indentation on the entire buffer."
    (interactive)
    (save-excursion
      (indent-region (point-min) (point-max))))
#+END_SRC

** Keybindings

#+BEGIN_SRC emacs-lisp
  (bind-key "M-o" 'indent-and-open-newline)
  (bind-key "C-o" 'previous-indent-and-open-newline)
  (bind-key "C-," 'indent-buffer)
  (bind-key "M-z" 'zap-up-to-char)
  (bind-key "M-F" 'forward-to-word)
  (bind-key "M-B" 'backward-to-word)
#+END_SRC

* Spelling
** Hooks

#+BEGIN_SRC emacs-lisp
  (defadvice org-mode-flyspell-verify (after org-mode-flyspell-verify-hack activate)
    (let* ((rlt ad-return-value)
           (begin-regexp "^[ \t]*#\\+begin_\\(src\\|html\\|latex\\|example\\|quote\\)")
           (end-regexp "^[ \t]*#\\+end_\\(src\\|html\\|latex\\|example\\|quote\\)")
           (case-fold-search t)
           b e)
      (when ad-return-value
        (save-excursion
          (setq b (re-search-backward begin-regexp nil t))
          (if b (setq e (re-search-forward end-regexp nil t))))
        (if (and b e (< (point) e)) (setq rlt nil)))
      (setq ad-return-value rlt)))

  (defun aj/org-ispell ()
    "Configure `ispell-skip-region-alist' for `org-mode'."
    ;; (make-local-variable 'ispell-skip-region-alist)
    (setq ispell-parser 'tex)
    (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
    (add-to-list 'ispell-skip-region-alist '("~" "~"))
    (add-to-list 'ispell-skip-region-alist '("=" "="))
    (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC")))

  (add-hook 'org-mode-hook #'aj/org-ispell)

  (add-hook 'message-mode-hook  'flyspell-mode)
  (add-hook 'org-mode-hook      'flyspell-mode)
  (add-hook 'text-mode-hook     'flyspell-mode)
  (add-hook 'flyspell-mode-hook '(lambda () (diminish 'flyspell-mode "SP")))
#+END_SRC

** Keybindings

#+BEGIN_SRC emacs-lisp
  ;; Make room for ispell prefix
  (bind-key "C-c i"    nil)
  (bind-key "C-c i b" 'ispell)
  (bind-key "C-c i w" 'ispell-word)

  (eval-after-load "flyspell"
    '(define-key flyspell-mode-map (kbd "C-,") nil))
#+END_SRC

* Frames, Windows & Buffers
** Functions
*** Next frame in window

Helper function that moves to the next window of the current frame.
Essentially a simplified version of =other-window= (C-x o).

#+BEGIN_SRC emacs-lisp
  (defun next-frame-in-window ()
    "Jump to next window in current frame"
    (interactive)
    (select-window (next-window)))
#+END_SRC

*** Previous frame in window

Helper function that moves to the previous window of the current frame.

#+BEGIN_SRC emacs-lisp
  (defun previous-frame-in-window ()
    "Jump to previous window in current frame"
    (interactive)
    (select-window (previous-window)))
#+END_SRC

*** Rotate windows in frame

Helper function that rotates the windows of the current frame in a
counter-clockwise direction.

#+BEGIN_SRC emacs-lisp
  (defun rotate-windows-in-frame ()
    (interactive)
    (let ((map
           (mapcar
            (lambda (window)
              `(,window
                ,(window-buffer
                  (next-window window))))
            (window-list))))
      (mapcar
       (lambda (window-to-buffer)
         (let ((window (car window-to-buffer))
               (buffer (cadr window-to-buffer)))
           (select-window window)
           (switch-to-buffer buffer))) map)))
#+END_SRC

*** Toggle split window

Helper function that toggles the way in which the windows are split (left/right or down/up).

#+BEGIN_SRC emacs-lisp
  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
               (next-win-buffer (window-buffer (next-window)))
               (this-win-edges (window-edges (selected-window)))
               (next-win-edges (window-edges (next-window)))
               (this-win-2nd (not (and (<= (car this-win-edges)
                                           (car next-win-edges))
                                       (<= (cadr this-win-edges)
                                           (cadr next-win-edges)))))
               (splitter
                (if (= (car this-win-edges)
                       (car (window-edges (next-window))))
                    'split-window-horizontally
                  'split-window-vertically)))
          (delete-other-windows)
          (let ((first-win (selected-window)))
            (funcall splitter)
            (if this-win-2nd (other-window 1))
            (set-window-buffer (selected-window) this-win-buffer)
            (set-window-buffer (next-window) next-win-buffer)
            (select-window first-win)
            (if this-win-2nd (other-window 1))))))
#+END_SRC

*** Kill focused buffer

Helper function that kills the currently focused buffer. Pretty self explanatory.

#+BEGIN_SRC emacs-lisp
  (defun kill-focused-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
#+END_SRC

** Keybindings

#+BEGIN_SRC emacs-lisp
  (bind-key "<M-return>" 'toggle-frame-fullscreen)
  (bind-key "C-S-b"      'bury-buffer)
  (bind-key "C-S-f"      'unbury-buffer)
  (bind-key "C-x C-b"    'ibuffer)
  (bind-key "M-j l"      'next-frame-in-window)
  (bind-key "M-j h"      'previous-frame-in-window)
  (bind-key "C-|"        'rotate-windows-in-frame)
  (bind-key "C-M-]"      'toggle-window-split)
  (bind-key "C-x C-k"    'kill-focused-buffer)
#+END_SRC

* Dired
** Packages
*** [[https://github.com/juan-leon/dired-efap][dired-efap]]

Install ~direc-efap~ to edit filenames in place while in ~dired-mode~.

#+BEGIN_SRC emacs-lisp
  (use-package dired-efap
    :ensure t
    :config (setq dired-efap-initial-filename-selection 'no-extension))
#+END_SRC

*** dired-details

Install ~dired-details~ for a more minimal ~dired-mode~ view.

#+BEGIN_SRC emacs-lisp
  (require 'dired-details)
  (setq-default dired-details-hidden-string "--- ")
  (dired-details-install)
#+END_SRC

** Hooks

Setup ~dired-mode-hook~.

#+BEGIN_SRC emacs-lisp
  (defun aj/dired-mode-hook ()
    "Setup dired-mode-hook"
    (define-key dired-mode-map (kbd "<backspace>") 'dired-up-directory)
    (define-key dired-mode-map (kbd "e") 'dired-efap))

  (add-hook 'dired-mode-hook 'aj/dired-mode-hook)
#+END_SRC

* Package

Useful function for marking a single package for upgrade ([[https:www.reddit.com/r/emacs/comments/6thg6j/command_to_mark_single_packages_for_upgrade/][source]]).

#+BEGIN_SRC emacs-lisp
  (defun package-menu-upgrade-package ()
    "Mark current package for upgrading (i.e. also mark obsolete version for deletion.)"
    (interactive)
    (when-let ((upgrades (package-menu--find-upgrades))
               (description (tabulated-list-get-id))
               (name (package-desc-name description))
               (upgradable (cdr (assq name upgrades))))
      ;; Package is upgradable
      (save-excursion
        (goto-char (point-min))
        (while (not (eobp))
          (let* ((current-description (tabulated-list-get-id))
                 (current-name (package-desc-name current-description)))
            (when (equal current-name name)
              (cond ((equal description current-description)
                     (package-menu-mark-install)
                     (forward-line -1))
                    (t (package-menu-mark-delete)))))
          (forward-line 1)))))
#+END_SRC

Configuration for the ~package~ package.

#+BEGIN_SRC emacs-lisp
  (use-package package
    :bind (:map package-menu-mode-map ("t" . 'package-menu-upgrade-package)))
#+END_SRC

* Discoverability
** Packages
*** [[https://github.com/abo-abo/swiper][ivy]]

Install and setup ivy/swiper/counsel for discoverability completion.

#+BEGIN_SRC emacs-lisp
  (defun aj/config--ivy ()
    "Do configuration for ivy-mode."
    (ivy-mode 1)
    ;; Add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
    (setq ivy-use-virtual-buffers t)
    ;; Number of result lines to display
    (setq ivy-height 15)
    ;; Does not count candidates
    (setq ivy-count-format "")
    ;; No regexp by default
    (setq ivy-initial-inputs-alist nil)
    ;; Configure regexp engine.
    (setq ivy-re-builders-alist
          ;; Allow input not in order
          '((t . ivy--regex-ignore-order))))

  (defun aj/init--counsel ()
    "Do configuration for counsel mode."
    (setq counsel-yank-pop-height 15))

  (use-package swiper
    :ensure t)

  (use-package counsel
    :ensure t
    :bind (("M-x"     . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("M-y"     . counsel-yank-pop))
    :init (aj/init--counsel))

  (use-package ivy
    :ensure t
    :after (counsel swiper)
    :diminish
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           :map ivy-minibuffer-map
           ("M-y" . ivy-next-line))
    :config (aj/config--ivy))

  (bind-key "C-c s"   nil)
  (bind-key "C-c s g" 'counsel-git)
  (bind-key "C-c s j" 'counsel-git-grep)
  (bind-key "C-c s a" 'counsel-ag)
  (bind-key "C-c s l" 'counsel-locate)

  (bind-key "C-*"     'swiper-mc)
#+END_SRC

Useful ivy/swiper/counsel functions.

swiper multiple-cursors (from: https://oremacs.com/2015/10/14/swiper-mc/)

#+BEGIN_SRC emacs-lisp
  ;; (defun aj/swiper-mc ()
  ;;   (interactive)
  ;;   (unless (require 'multiple-cursors nil t)
  ;;     (error "multiple-cursors isn't installed"))
  ;;   (let ((cands (nreverse ivy--old-cands)))
  ;;     (unless (string= ivy-text "")
  ;;       (ivy-set-action
  ;;        (lambda (_)
  ;;          (let (cand)
  ;;            (while (setq cand (pop cands))
  ;;              (swiper--action cand)
  ;;              (when cands
  ;;                (mc/create-fake-cursor-at-point))))
  ;;          (mc/maybe-multiple-cursors-mode)))
  ;;       (setq ivy-exit 'done)
  ;;       (exit-minibuffer))))

  ;; (bind-key "C-*" 'aj/swiper-mc)
#+END_SRC

*** [[https://github.com/justbur/emacs-which-key][which-key]]

Install ~which-key~ for incremental keystroke discoverability.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish
    :config (which-key-mode))
#+END_SRC

* Completion
** Packages
*** [[https://github.com/auto-complete/auto-complete][auto-complete]]

Install and configure ~auto-complete~.

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t)
#+END_SRC

*** [[https://www.emacswiki.org/emacs/ElDoc][eldoc]]

#+BEGIN_SRC emacs-lisp
  ;; (use-package eldoc
  ;;   :diminish
  ;;   :init (add-hook 'ycmd-mode-hook 'ycmd-eldoc-setup))
#+END_SRC

*** [[https://github.com/abingham/emacs-ycmd][ycmd]]

Install and configure ~ycmd~ for completion.

#+BEGIN_SRC emacs-lisp
  (defvar aj/ycmd-server-command '("python3" "-u" "/Users/andrewjacobson/dev/ycmd/ycmd"))
  (defvar aj/ycmd-extra-conf-whitelist '("~/.ycm_conf.py"))
  (defvar aj/ycmd-global-config "~/.ycm_conf.py")
  (defvar aj/python-location (executable-find (nth 0 aj/ycmd-server-command)))

  (if (not aj/python-location)
      (message (concat "Could not start YouCompleteMeDaemon because the python executable"
                       "could not be found.\nSpecified executable is: '%s'\n"
                       "Please set aj/ycmd-server-command appropriately in ~/.emacs.el.\n")
               (nth 0 aj/ycmd-server-command)))

  (if (not (file-directory-p (nth 2 aj/ycmd-server-command)))
      (message (concat "Could not YouCompleteMeDaemon because the specified"
                       "directory does not exist.\nSpecified directory is: '%s'\n"
                       "Please set aj/ycmd-server-command appropriately in ~/.emacs.el.\n")
               (nth 2 aj/ycmd-server-command)))

  (defun aj/config--ycmd ()
    "Do config for ycmd."
    (set-variable 'ycmd-server-command aj/ycmd-server-command)
    (set-variable 'ycmd-extra-conf-whitelist aj/ycmd-extra-conf-whitelist)
    (set-variable 'ycmd-global-config aj/ycmd-global-config)
    (setq ycmd-request-msg-level -1)
    (setq ycmd-force-semantic-completion t)
    (setq ycmd-startup-timeout 10)
    (require 'ycmd-eldoc)
    (add-hook 'ycmd-mode-hook 'ycmd-eldoc-setup)
    (add-hook 'c-mode-hook 'ycmd-mode)
    (add-hook 'c++-mode-hook 'ycmd-mode))

  (use-package ycmd
    :ensure t
    :config (aj/config--ycmd))

  (use-package flycheck-ycmd
    :ensure t
    :after (ycmd)
    :hook (c-mode-common-hook . flycheck-ycmd-setup))

  (use-package company-ycmd
    :ensure t
    :after (ycmd)
    :config (company-ycmd-setup))
#+END_SRC

*** [[http://company-mode.github.io/][company]]

Install, configure and enable [[http://company-mode.github.io/][company]] globally.

#+BEGIN_SRC emacs-lisp
  (defun aj/config--company ()
    "Do configuration for company-mode."
    (setq company-tooltip-align-annotations t)
    (setq company-idle-delay 0.1)
    (setq company-minimum-prefix-length 2)
    (setq company-tooltip-limit 10)
    ;; (setq company-backends
    ;;       (mapcar #'company-mode/backend-with-yas company-backends))
    (setq company-show-numbers t)

    ;; remove unused backends
    (setq company-backends (delete 'company-semantic company-backends))
    (setq company-backends (delete 'company-eclim company-backends))
    (setq company-backends (delete 'company-xcode company-backends))
    (setq company-backends (delete 'company-clang company-backends))
    (setq company-backends (delete 'company-bbdb company-backends))
    (setq company-backends (delete 'company-oddmuse company-backends))

    (aj/company--setup-complete-by-number-keybindings))

  ;; https://oremacs.com/2017/12/27/company-numbers/
  (defun aj/company--complete-by-number ()
    "Forward to `company-complete-number'.
  Unless the number is potentially part of the candidate.
  In that case, insert the number."
    (interactive)
    (let* ((k (this-command-keys))
           (re (concat "^" company-prefix k)))
      (if (or (cl-find-if (lambda (s) (string-match re s))
                          company-candidates)
              (> (string-to-number k)
                 (length company-candidates)))
          (self-insert-command 1)
        (company-complete-number
         (if (equal k "0")
             10
           (string-to-number k))))))

  (defun aj/company--setup-complete-by-number-keybindings ()
    (let ((map company-active-map))
      (mapc (lambda (x) (define-key map (format "%d" x) 'aj/company--complete-by-number))
            (number-sequence 0 9))
      (define-key map " " (lambda ()
                            (interactive)
                            (company-abort)
                            (self-insert-command 1)))
      (define-key map (kbd "<return>") nil)))

  (use-package company
    :ensure t
    :diminish
    :preface
    ;; enable yasnippet everywhere
    (defvar company-mode/enable-yas t
      "Enable yasnippet for all backends.")
    (defun company-mode/backend-with-yas (backend)
      (if (or
           (not company-mode/enable-yas)
           (and (listp backend) (member 'company-yasnippet backend)))
          backend
        (append (if (consp backend) backend (list backend))
                '(:with company-yasnippet))))
    :bind (("C-c <tab>" . company-complete)
           ("C-c c f"   . company-filter-candidates))
    :init (global-company-mode t)
    :config (aj/config--company))
#+END_SRC

*** [[https://github.com/abingham/emacs-ycmd/blob/master/company-ycmd.el][company-ycmd]]

#+BEGIN_SRC emacs-lisp
  (defun aj/config--company-ycmd ()
    "Do configuration for company-ycmd"
    ;; (push '(company-ycmd :with company-yasnippet company-dabbrev-code) company-backends)
    (push '(company-ycmd) company-backends))

  (use-package company-ycmd
    :ensure t
    :after ycmd
    ;; :init (company-ycmd-setup)
    :config (aj/config--company-ycmd))
#+END_SRC

*** [[https://github.com/Sarcasm/irony-mode][irony]]

Install and configure =irony-mode=.

#+BEGIN_SRC emacs-lisp
  (defun aj/hook--irony ()
    "Hook for `irony-mode'."
    (print "setting up compile options...")
    (irony-cdb-autosetup-compile-options))

  (use-package irony
    :ensure t
    :hook (
           ;; ((c-mode c++-mode) . irony-mode)
           (irony-mode        . aj/hook--irony)))
#+END_SRC

*** [[https://github.com/Sarcasm/company-irony][company-irony]]

Install =company-irony= and add it to the =company-backends= list.

#+BEGIN_SRC emacs-lisp
  ;; (use-package company-irony
  ;;   :ensure t
  ;;   :config (add-to-list 'company-backends 'company-irony))
#+END_SRC

*** [[https://github.com/joaotavora/yasnippet][yasnippet]]

Install =yasnippet= and =yasnippet= related packages.

#+BEGIN_SRC emacs-lisp
  (defun aj/config--yasnippet ()
    "Do configuration for `yasnippet'."
    (yas-global-mode t)
    (yas-reload-all))

  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :config (aj/config--yasnippet))

  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet
    :config (yas-reload-all))

  (use-package company-yasnippet
    :after yasnippet
    :bind ("C-M-y" . company-yasnippet))
#+END_SRC

* Programming
** General
*** Packages
**** [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]]

Sync Emacs env with shell env. Especially important on OSX.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :init (exec-path-from-shell-initialize))
#+END_SRC

**** [[https://magit.vc/][magit]]

Magit is an amazing git porcelain! Let's install it and set it up.

#+BEGIN_SRC emacs-lisp
  (defun aj/config--magit ()
    "Do magit configuration."
    (setq magit-completing-read          'ivy-completing-read)
    (setq magit-completing-read-function 'ivy-completing-read))

  (use-package magit
    :ensure t
    :config (aj/config--magit)
    :bind (("M-j g"   . magit-status)
           ("C-c m"   . nil)
           ("C-c m b" . magit-blame)
           ("C-c m B" . magit-blame-popup)))
#+END_SRC

**** git-timemachine

~git-timemachine~ is a useful package for stepping between different ~git~ versions
of a specific file.

#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t)
#+END_SRC

**** [[https://github.com/tsdh/highlight-parentheses.el][highlight-parentheses]]

Gives nice highlighting for parens that your cursor is currently inside of.

#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :ensure t
    :diminish
    :init (add-hook 'prog-mode-hook #'highlight-parentheses-mode))
#+END_SRC

**** [[https://github.com/Fuco1/smartparens][smartparens]]

Install and setup smartparens to behave similarly to paredit.

#+BEGIN_SRC emacs-lisp
  (defun aj/config--smartparens ()
    "Do configuration for smartparens."
    ;; Pull in default smartparens config
    (use-package smartparens-config)
    ;; Make `sp-kill-hybrid-sexp' delete all whitespace up until next sexp
    ;; (setq sp-hybrid-kill-excessive-whitespace t)
    )

  (defun aj/init--smartparens ()
    (smartparens-global-mode t)
    (mapcar
     (lambda (hook)
       (add-hook hook 'smartparens-strict-mode)) '(emacs-lisp-mode-hook lisp-mode-hook clojure-mode-hook)))

  (use-package smartparens
    :ensure t
    :diminish
    :config (aj/config--smartparens)
    :init (aj/init--smartparens)
    :bind (("C-M-a" . sp-beginning-of-sexp)
           ("C-M-e" . sp-end-of-sexp)
           ("C-M-p" . sp-up-sexp)
           ("C-M-n" . sp-down-sexp)
           ("C-M-f" . sp-forward-sexp)
           ("C-M-b" . sp-backward-sexp)
           ("M-s"   . sp-splice-sexp)
           ("C-)"   . sp-forward-slurp-sexp)
           ("C-}"   . sp-forward-barf-sexp)
           ("C-("   . sp-backward-slurp-sexp)
           ("C-{"   . sp-backward-barf-sexp)))
#+END_SRC

**** [[https://github.com/bbatsov/projectile][projectile]]

Install and setup projectile for project management.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :custom (projectile-completion-system 'ivy "Use ivy for projectile completion")
    :hook (prog-mode . projectile-mode))

  (defun aj/setup-javascript-project ()
    "Do projectile setup for a JavaScript project"
    (setq projectile-test-cmd #'mocha-test-project))

  (add-hook
   'projectile-mode
   (lambda ()
     (add-hook 'js2-mode 'aj/setup-javascript-project)))
#+END_SRC

**** [[https://github.com/ericdanan/counsel-projectile][counsel-projectile]]

Hook projectile up to counsel for consistent discoverability.

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :config (counsel-projectile-mode))
#+END_SRC

**** [[https://github.com/mhayashi1120/Emacs-wgrep][wgrep]]

wgrep is good. Let's install it now.

#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :ensure t
    :config (setq wgrep-auto-save-buffer t))

  (use-package wgrep-ag
    :ensure t)
#+END_SRC

**** [[https://github.com/flycheck/flycheck][flycheck]]

Install and setup =flycheck-mode= for syntax checking on-the-fly.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish (flycheck-mode)
    :init (global-flycheck-mode t)
    :config (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
#+END_SRC

**** [[https://github.com/abingham/emacs-ycmd/blob/master/flycheck-ycmd.el][flycheck-ycmd]]

Install and setup =flycheck-ycmd= so that flycheck can hook into the ycmd server results.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-ycmd
    :ensure t
    :commands (flycheck-ycmd-setup)
    :hook ('ycmd-mode-hook 'flycheck-ycmd-setup))
#+END_SRC

**** [[https://github.com/jacktasia/dumb-jump][dump-jump]]

Install and configure =dumb-jump=.

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g i" . dumb-jump-go-prompt)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config (setq dumb-jump-selector 'ivy))
#+END_SRC

**** [[https://github.com/realgud/realgud][realgud]]

Install and configure =realgud=, a front end for a variety of external debuggers.

#+BEGIN_SRC emacs-lisp
  (use-package realgud
    :ensure t)
#+END_SRC

**** [[https://github.com/kyagi/shell-pop-el][shell-pop]]

Install and configure ~shell-pop~, a package for quickly popping up a shell in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package shell-pop
    :ensure t
    :bind (("C-." . shell-pop))
    :config
    (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
    (setq shell-pop-term-shell "/bin/zsh")
    ;; need to do this manually or not picked up by `shell-pop'
    (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))
#+END_SRC

** Languages
*** C/C++
**** Config

Do basic configuration for C/C++ modes.

#+BEGIN_SRC emacs-lisp
  (defun aj/setup-c-modes ()
    "Do setup for C/C++ modes"
    (define-key company-mode-map
      [remap completion-at-point] 'counsel-irony)
    (define-key company-mode-map
      [remap complete-symbol] 'counsel-irony))

  (defun aj/config--c/c++-modes ()
    "Do configuration for C/C++ modes"
    (setq c-basic-offset 4)
    (c-set-offset 'substatement-open 0)
    (c-set-offset 'arglist-intro '+)
    (c-set-offset 'arglist-close 0))

  (add-hook 'c-mode-hook 'aj/config--c/c++-modes)
  (add-hook 'c++-mode-hook 'aj/config--c/c++-modes)

  ;; (add-hook 'c-mode-hook   'aj/setup-c-modes)
  ;; (add-hook 'c++-mode-hook 'aj/setup-c-modes)
#+END_SRC

**** Packages
***** cmake-mode

Install and configure =cmake-mode= for editing =CMakeLists.txt= files.

#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :ensure t
    :mode "\\CMakeLists.txt\\'"
    :hook (cmake-mode . (lambda () (add-to-list 'company-backends 'company-cmake))))
#+END_SRC

***** [[https://github.com/redguardtoo/counsel-etags][counsel-etags]]

Install =counsel-etags=, a Ctags front-end built with Ivy completion.

#+BEGIN_SRC emacs-lisp
  (defun aj/config--counsel-etags ()
    "Do configuration for `counsel-etags'."
    (setq tags-revert-without-query t)
    (setq large-file-warning-threshold nil)
    (setq counsel-etags-max-file-size 800)
    (setq counsel-etags-update-interval 180)
    (add-to-list 'counsel-etags-ignore-directories '"build*")
    (add-to-list 'counsel-etags-ignore-directories '".vscode")
    (add-to-list 'counsel-etags-ignore-filenames   '".clang-format")
    (add-to-list 'counsel-etags-ignore-directories  "build_clang")
    (add-to-list 'counsel-etags-ignore-directories  "build_clang")
    (add-to-list 'counsel-etags-ignore-filenames    "TAGS")
    (add-to-list 'counsel-etags-ignore-filenames    "*.json")
    (add-hook
     'prog-mode-hook
     (lambda ()
       (add-hook
        'after-save-hook
        (lambda ()
          (counsel-etags-virtual-update-tags))))))

  ;; taken from: https://gist.github.com/nilsdeppe/7645c096d93b005458d97d6874a91ea9
  (defun my-scan-dir (src-dir &optional force)
    "Create tags file from SRC-DIR. \
       If FORCE is t, the commmand is executed without \
       checking the timer."
    (let* ((find-pg (or
                     counsel-etags-find-program
                     (counsel-etags-guess-program "find")))
           (ctags-pg (or
                      counsel-etags-tags-program
                      (format "%s -e -L" (counsel-etags-guess-program
                                          "ctags"))))
           (default-directory src-dir)
           ;; run find&ctags to create TAGS
           (cmd (format
                 "%s . \\( %s \\) -prune -o -type f -not -size +%sk %s | %s -"
                 find-pg
                 (mapconcat
                  (lambda (p)
                    (format "-iwholename \"*%s*\"" p))
                  counsel-etags-ignore-directories " -or ")
                 counsel-etags-max-file-size
                 (mapconcat (lambda (n)
                              (format "-not -name \"%s\"" n))
                            counsel-etags-ignore-filenames " ")
                 ctags-pg))
           (tags-file (concat (file-name-as-directory src-dir) "TAGS"))
           (doit (or force (not (file-exists-p tags-file)))))
      ;; always update cli options
      (when doit
        (message "%s at %s" cmd default-directory)
        (shell-command cmd)
        (visit-tags-table tags-file t))))

  (defun counsel-etags-update-tags-backend ()
    (interactive)
    (let* ((tags-file (counsel-etags-locate-tags-file)))
      (when tags-file
        (my-scan-dir (file-name-directory tags-file) t)
        (run-hook-with-args
         'counsel-etags-after-update-tags-hook tags-file)
        (unless counsel-etags-quiet-when-updating-tags
          (message "%s is updated!" tags-file)))))

  (use-package counsel-etags
    :ensure t
    :config (aj/config--counsel-etags)
    ;; :bind (:map c++-mode-map
    ;;             ("M-."     . 'counsel-etags-find-tag-at-point)
    ;;             ("C-c t"   . nil)
    ;;             ("C-c t g" . 'counsel-etags-grep-symbol-at-point)
    ;;             ("C-c t f" . 'counsel-etags-find-tag)
    ;;             :map c-mode-map
    ;;             ("M-."     . 'counsel-etags-find-tag-at-point)
    ;;             ("C-c t"   . nil)
    ;;             ("C-c t g" . 'counsel-etags-grep-symbol-at-point)
    ;;             ("C-c t f" . 'counsel-etags-find-tag))
    )
#+END_SRC

***** [[https://github.com/sonatard/clang-format][clang-format]]

Install and configure =clang-format=.

#+BEGIN_SRC emacs-lisp
  (use-package clang-format
    :ensure t
    :config (setq clang-format-style "file"))
#+END_SRC

Custom function for running =clang-format= inside of a =projectile= project on save.

Taken from: https://eklitzke.org/smarter-emacs-clang-format

#+BEGIN_SRC emacs-lisp
  (defun clang-format-buffer-smart ()
    "Reformat buffer if .clang-format exists in the projectile root."
    (when (f-exists? (expand-file-name ".clang-format" (projectile-project-root)))
      (clang-format-buffer)))

  (add-hook
   'c++-mode-hook
   (lambda ()
     (add-hook 'before-save-hook 'clang-format-buffer-smart nil t)))
#+END_SRC

***** [[https://github.com/ludwigpacifici/modern-cpp-font-lock][modern-cpp-font-lock]]

Install and configure =modern-cpp-font-lock= to enable better C++ syntax highlighting.

#+BEGIN_SRC emacs-lisp
  (use-package modern-cpp-font-lock
    :ensure t
    :hook (c++-mode . modern-c++-font-lock-mode))
#+END_SRC

***** rtags

Install and configure =rtags=.

#+BEGIN_SRC emacs-lisp
  ;;(defun aj/config--rtags ()
  ;;  "Do configuration for `rtags'."
  ;;  (unless (rtags-executable-find "rc") (error "Binary rc is not installed"))
  ;;  (unless (rtags-executable-find "rdm") (error "Binary rdm is not installed"))
  ;;  (message "enabling standard rtags keybindings...")
  ;;  (rtags-enable-standard-keybindings)
  ;;  (message "bindings enabled.")
  ;;  (add-hook 'kill-emacs-hook 'rtags-quit-rdm))

  ;;(use-package rtags
  ;;  :ensure t
  ;;  :config (aj/config--rtags))
#+END_SRC
*** Clojure
**** Packages
***** [[https://github.com/clojure-emacs/clojure-mode/][clojure-mode]]

Install and configure ~clojure-mode~.

#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t)
#+END_SRC

***** [[https://github.com/clojure-emacs/cider][cider]]

Install and configure (C)lojure (I)nteractive (D)evelopment (E)nvironment that (R)ocks!

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t)
#+END_SRC

*** Elixir
**** Packages
***** [[https://github.com/tonini/alchemist.el][alchemist]]

Install and setup ~alchemist~.

#+BEGIN_SRC emacs-lisp
  (defun aj/config--alchemist ()
    "Do configuration for alchemist."
    (setq alchemist-goto-elixir-source-dir "~/dev/elixir/")
    (setq alchemist-goto-erlang-source-dir "~/dev/otp/")
    ;; (setq alchemist-hooks-compile-on-save t)
    ;; (setq alchemist-hooks-test-on-save t)
    (add-hook 'elixir-mode-hook 'aj/hook--alchemist))

  (defun aj/hook--alchemist ()
    "Add alchemist hooks."
    (add-hook 'before-save-hook 'elixir-format nil t))

  (use-package alchemist
    :ensure t
    :config (aj/config--alchemist)
    :bind (:map alchemist-mode-map
                ("C-c a p n" . 'alchemist-project-create-file)))
#+END_SRC
*** Elm
**** Packages
***** [[https://github.com/jcollard/elm-mode][elm-mode]]

Install and configure ~elm-mode~.

#+BEGIN_SRC emacs-lisp
  (use-package f         :ensure t)
  (use-package let-alist :ensure t)
  (use-package s         :ensure t)
  (use-package dash      :ensure t)

  ;; (defun aj/config--elm ()
  ;;   "Do configuration for `elm-mode'"
  ;;   (add-to-list 'company-backends 'company-elm))

  ;; (use-package elm-mode
  ;;   :ensure t
  ;;   :after (f let-alist s dash)
  ;;   :config
  ;;   (setq elm-format-on-save t)
  ;;   ;; (add-to-list 'company-backends 'company-elm)
  ;;   ;; (add-hook 'elm-mode-hook #'elm-oracle-setup-completion)
  ;;   )

  ;; (use-package elm-mode
  ;;   :ensure t
  ;;   :after (f let-alist s dash))

  ;; (add-hook
  ;;  'elm-mode-hook
  ;;  (lambda ()
  ;;    (setq company-backends '(company-elm))
  ;;    (elm-oracle-setup-completion)))

  ;; (add-hook 'elm-mode-hook #'elm-oracle-setup-completion)

  ;; (with-eval-after-load 'company
  ;;   (add-to-list 'company-backends 'company-elm))
  ;; (add-hook 'elm-mode-hook #'elm-oracle-setup-completion)

  ;; (add-hook 'elm-mode-hook
  ;;           (lambda ()
  ;;             (setq company-backends '(company-elm))))

  (require 'elm-mode)

  ;; (add-hook 'flycheck-mode-hook 'flycheck-elm-setup)
  (add-hook 'elm-mode-hook
            (lambda ()
              (setq company-backends '(company-elm))))
  ;;            (set (make-local-variable 'company-backends) '(company-elm))))

  (add-hook 'elm-mode-hook #'elm-oracle-setup-completion)
#+END_SRC
*** Erlang
**** Packages
***** erlang-mode

Install and setup ~erlang-mode~.

#+BEGIN_SRC emacs-lisp
  (defvar aj/erlang-emacs-dir    (expand-file-name "~/.erlangs/21.1/lib/tools-3.0.1/emacs/"))
  (defvar aj/erlang-root-dir     (expand-file-name "~/.erlangs/21.1"))
  (defvar aj/erlang-exec-path    (expand-file-name "~/.erlangs/21.1/bin"))
  (defvar aj/erlang-man-root-dir (expand-file-name "~/.erlangs/21.1/man"))

  (add-to-list 'load-path aj/erlang-emacs-dir)

  (setq erlang-root-dir aj/erlang-root-dir)
  (setq exec-path (cons aj/erlang-exec-path exec-path))
  (setq erlang-man-root-dir aj/erlang-man-root-dir)

  (require 'erlang-start)

  (add-to-list 'load-path "~/.emacs.d/git/distel/elisp/")
  (require 'distel)
  (distel-setup)

  ;; prevent annoying hang-on-compile
  (defvar inferior-erlang-prompt-timeout t)
  ;; default node name to emacs@localhost
  (setq inferior-erlang-machine-options '("-sname" "emacs"))
  ;; tell distel to default to that node
  (setq erl-nodename-cache
        (make-symbol
         (concat
          "emacs@"
          ;; Mac OS X uses "name.local" instead of "name", this should work
          ;; pretty much anywhere without having to muck with NetInfo
          ;; ... but I only tested it on Mac OS X.
          (car (split-string (shell-command-to-string "hostname"))))))
#+END_SRC

***** [[https://github.com/massemanet/distel][distel]]

Install and configure ~distel~ Erlang IDE.

#+BEGIN_SRC emacs-lisp
  ;; ;; from: https://www.lambdacat.com/post-modern-emacs-setup-for-erlang/
  ;; (add-to-list 'load-path "/Users/andrewjacobson/.erlangs/21.1/lib/tools-3.0.1/emacs")
  ;; (add-to-list 'load-path "~/.emacs.d/git/distel/elisp/")
  ;; ;; (push "~/.emacs.d/git/distel/elisp/" load-path)
  ;; (require 'distel)
  ;; (distel-setup)

  ;; ;; prevent annoying hang-on-compile
  ;; (defvar inferior-erlang-prompt-timeout t)
  ;; ;; default node name to emacs@localhost
  ;; (setq inferior-erlang-machine-options '("-sname" "emacs"))
  ;; ;; tell distel to default to that node
  ;; (setq erl-nodename-cache
  ;;       (make-symbol
  ;;        (concat
  ;;         "emacs@"
  ;;         ;; Mac OS X uses "name.local" instead of "name", this should work
  ;;         ;; pretty much anywhere without having to muck with NetInfo
  ;;         ;; ... but I only tested it on Mac OS X.
  ;;         (car (split-string (shell-command-to-string "hostname"))))))
#+END_SRC

***** [[https://github.com/sebastiw/distel-completion][company-distel]]

Install and configure ~company-distel~ for auto-completion.

#+BEGIN_SRC emacs-lisp
  ;; (defun aj/config--company-distel ()
  ;;   "Do configuration for `company-distel'."
  ;;   (add-to-list 'company-backends 'company-distel))

  ;; (use-package company-distel
  ;;   :ensure t
  ;;   :after (distel company)
  ;;   :config (aj/config--company-distel))
#+END_SRC

***** flycheck

Configure ~flycheck~ for ~erlang-otp~.

#+BEGIN_SRC emacs-lisp
  ;; (flycheck-define-checker erlang-otp
  ;;   "An Erlang syntax checker using the Erlang interpreter."
  ;;   :command ("erlc" "-o" temporary-directory "-Wall"
  ;;             "-I" "../include" "-I" "../../include"
  ;;             "-I" "../../../include" source)
  ;;   :error-patterns
  ;;   ((warning line-start (file-name) ":" line ": Warning:" (message) line-end)
  ;;    (error line-start (file-name) ":" line ": " (message) line-end))
  ;;   :modes (erlang-mode))

  ;; (add-to-list 'flycheck-checkers 'erlang-otp)
#+END_SRC

*** Go
**** Packages
***** [[https://github.com/dominikh/go-mode.el][go-mode]]

Install and configure ~go-mode~.

#+BEGIN_SRC emacs-lisp
  (defun aj/hook--go ()
    "`go-mode' hook."
    (add-hook 'before-save-hook 'gofmt-before-save)
    (go-eldoc-setup)
    (go-guru-hl-identifier-mode)
    (setq gofmt-command "goimports")
    (if (not (string-match "go" compile-command))
        (set (make-local-variable 'compile-command)
             "go build -v && go test -v && go vet")))

  (defun aj/config--go ()
    "Do configuration for `go-mode'."
    (add-to-list 'company-backends 'company-go))

  (use-package go-mode
    :ensure t
    :after (company-go go-eldoc)
    :hook (go-mode . aj/hook--go)
    :config (aj/config--go)
    :bind (:map go-mode-map
                ("M-." . godef-jump)
                ("M-," . pop-tag-mark)
                ("M-p" . compile)
                ("M-P" . recompile)
                ("M-]" . next-error)
                ("M-[" . previous-error)))
#+END_SRC

***** company-go

Install and configure ~company-go~.

#+BEGIN_SRC emacs-lisp
  (use-package company-go
    :ensure t)
#+END_SRC

***** [[https://github.com/syohex/emacs-go-eldoc][go-eldoc]]

Install and configure ~go-eldoc~.

#+BEGIN_SRC emacs-lisp
  (use-package go-eldoc
    :ensure t)
#+END_SRC

***** go-guru

Install and configure ~go-guru~.

#+BEGIN_SRC emacs-lisp
  (use-package go-guru
    :ensure t)
#+END_SRC

***** [[https://github.com/grafov/go-playground][go-playground]]

Install ~go-playground~, a simple golang REPL inside Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package go-playground
    :ensure t)
#+END_SRC

*** JavaScript
**** Packages
***** [[https://github.com/mooz/js2-mode][js2-mode]]

Install and configure ~js2-mode~, an improved JavaScript major mode.

#+BEGIN_SRC emacs-lisp
  (defun aj/setup-js2 ()
    "Do configuration for js2-mode."
    (message "Settting up js2-mode...")
    (setq js2-basic-offset 2)
    (setq js2-mode-indent-ignore-first-tab t)
    (setq js2-highlight-external-variables nil)
    (setq js2-highlight-level 3)
    (setq js2-mirror-mode nil)
    (setq js2-mode-show-parse-errors t)
    (setq js2-mode-show-strict-warnings t)
    (setq js2-pretty-multiline-declarations t)
    (setq js2-bounce-indent-p nil))

  (use-package js2-mode
    :ensure t
    :mode ("\\.js\\'" . js2-mode)
    :hook (js2-mode . aj/setup-js2))
#+END_SRC

***** [[https://github.com/magnars/js2-refactor.el][js2-refactor]]

Install and configure ~js2-refactor~.

#+BEGIN_SRC emacs-lisp
  (defun aj/config--js2-refactor ()
    "Do configuration for js2-refactor."
    (js2r-add-keybindings-with-prefix "C-c C-r"))

  (use-package js2-refactor
    :ensure t
    :diminish js2-refactor-mode
    :config (aj/config--js2-refactor)
    :init (add-hook 'js2-mode-hook #'js2-refactor-mode))
#+END_SRC

***** [[https://github.com/nicolaspetton/xref-js2][xref-js2]]

Install and configure ~xref-js2r~ for jump-to-definition abilities in JavaScript.

#+BEGIN_SRC emacs-lisp
  (use-package xref-js2
    :ensure t
    :config (define-key js-mode-map (kbd "M-.") nil))

  (add-hook
   'js2-mode-hook
   (lambda ()
     (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
#+END_SRC

***** [[https://github.com/proofit404/company-tern][company-tern]]

Install and configure ~company-tern~ for JavaScript auto-completion.

#+BEGIN_SRC emacs-lisp
  (defun aj/config--tern ()
    "Do configuration for tern mode."
    (add-to-list 'company-backends 'company-tern)
    (define-key tern-mode-keymap (kbd "M-.") nil)
    (define-key tern-mode-keymap (kbd "M-,") nil)
    (define-key tern-mode-keymap (kbd "C-c C-r") nil))

  (use-package company-tern
    :ensure t
    :diminish tern-mode
    :config (aj/config--tern))

  (add-hook 'js2-mode-hook #'tern-mode)
#+END_SRC

***** [[https://github.com/scottaj/mocha.el][mocha]]

Install and configure =mocha.el= for running mocha tests inside of emacs.

#+BEGIN_SRC emacs-lisp
  (defun aj/config--mocha ()
    "Do configuration for `mocha.el'."
    (setq mocha-which-node "/Users/andrewjacobson/.nvm/versions/node/v9.10.1/bin/node")
    (setq mocha-command "node_modules/.bin/mocha")
    (setq mocha-options "--require @babel/register --recursive --colors --reporter dot -t 5000")
    (setq mocha-project-test-directory "test")
    (setq mocha-environment-variables "NODE_ENV=test"))

  (use-package mocha
    :ensure t
    :config (aj/config--mocha))
#+END_SRC
*** Markdown

Install and setup =markdown-mode=.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (
           ;; ("README\\.md\\'" . gfm-mode) ;; github flavored version of markdown...
           ("\\.md\\'"       . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    ;; :init (setq markdown-command "multimarkdown")
    )
#+END_SRC

*** Perl

#+BEGIN_SRC emacs-lisp
  ;; (defun aj/config--plsense ()
  ;;   "Do configuration for plsense"
  ;;       (add-to-list 'company-backends 'plsense))

  ;; (use-package plsense
  ;;   :ensure t
  ;;   :config (plsense-config-default))
#+END_SRC
*** TypeScript

Do setup for =typescript-mode= and =tide=.

#+BEGIN_SRC emacs-lisp
  (defun aj/setup-tide ()
    "Setup TIDE."
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (tide-hl-identifier-mode +1)
    (eldoc-mode +1))

  (defun aj/setup-typescript ()
    "Setup TypeScript environment."
    (interactive)
    ;; (setq typescript-expr-indent-offset 2)
    (ycmd-mode nil)
    (aj/setup-tide))

  (use-package typescript-mode
    :ensure t
    :mode (("\\.ts\\'" . typescript-mode))
    :init
    (use-package tide
      :ensure t
      :diminish
      :hook (typescript-mode . aj/setup-typescript)))
#+END_SRC

*** Web

Install and configure ~web-mode~, a major mode for editing various "web" templates.

#+BEGIN_SRC emacs-lisp
  (defun aj/setup-web-mode ()
    "Add custom settings for web-mode."
    (when (string-equal "tsx" (file-name-extension buffer-file-name))
      (if (equal web-mode-content-type "javascript")
          (web-mode-set-content-type "jsx"))
      (aj/setup-typescript)
      (flycheck-add-mode 'typescript-tslint 'web-mode))
    (setq web-mode-markup-indent-offset 2))

  (use-package web-mode
    :ensure t
    :mode (("\\.tsx\\'" . web-mode)  ;; TypeScript JSX
           ("\\.jsx\\'" . web-mode)  ;; JSX
           ("\\.eex\\'" . web-mode)) ;; Embedded Elixir templates
    :init (add-hook 'web-mode-hook 'aj/setup-web-mode))
#+END_SRC

* Misc
** Learning

Stole this bit from [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]]. Essentially it pulls up the docs for a random, non-obsolete
interactive Emacs function.

I love the idea of learning 1 small new thing about Emacs everyday. I have recently been trying to step
up my Emacs game and using this function to learn about new Emacs feature on a daily basis
is exactly what I need :)

#+BEGIN_SRC emacs-lisp
  (defun aj/describe-random-interactive-function ()
    (interactive)
    "Show the documentation for a random interactive function.
  Consider only documented, non-obsolete functions."
    (let (result)
      (mapatoms
       (lambda (s)
         (when (and (commandp s)
                    (documentation s t)
                    (null (get s 'byte-obsolete-info)))
           (setq result (cons s result)))))
      (describe-function (elt result (random (length result))))))
#+END_SRC

** IRC

Function for logging into the freenode irc.

#+BEGIN_SRC emacs-lisp
  (defun aj/irc (&optional server port nick)
    "Log into irc server.
  Uses default values for SERVER, PORT and NICK if they are not supplied"
    (interactive)
    (erc
     :server (or server "irc.freenode.net")
     :port   (or port   "6667")
     :nick   (or nick   "andyjac")))
#+END_SRC

** Internet
*** Packages
**** w3m

Install ~w3m~, the text-based web-browser.

#+BEGIN_SRC emacs-lisp
  (use-package w3m
    :ensure t)
#+END_SRC

* TODOS
** DONE [P2] Finish configuring ~erlang-mode~.
** TODO [P3] Finish configuring ~elm-mode~.
** TODO [P2] Move global keybindings to their own respective sections.
** TODO [P3] Learn about [[https://github.com/abo-abo/hydra][hydras]] and [[https://www.emacswiki.org/emacs/KeyChord][key chords]] and see if they can be incorporated.
** TODO [P1] In general, better keybinding patterns/namespaces would be good.
** TODO [P2] Finish implementing [[https://nilsdeppe.com/posts/emacs-c++-ide2][these]] C/C++ IDE configurations
** DONE [P2] Also found [[https://nilsdeppe.com/posts/emacs-c++-ide2][here]], try running Emacs as a server (deamon) and using ~emacsclient~ for a quicker startup (potentially)
